@* Ternary Encryption Suite with REFC, AECS, RTPE, and TRTSC *@
This program implements a ternary encryption suite with four ciphers: Recursive Entropy Folding Cipher (REFC), Axion-Evolved Cipher Stream (AECS), Recursive Ternary Path Encryption (RTPE), and Time-Reversed Ternary Stream Cipher (TRTSC). It supports encryption and decryption, integrates with binary-to-ternary conversion, compresses ciphertexts, and provides file I/O with a T81Z format. Command-line options allow flexible configuration.
@c

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <openssl/sha.h> // For SHA-256 and CRC32
#define MAX_TRITS 1024
#define MAX_KEY_SIZE 128
#define MAX_DEPTH 16
#define TRIT_VALUES 3
typedef int8_t Trit; // -1, 0, +1
typedef struct {
    Trit trits[MAX_TRITS];
    int length;
} T81TritBuffer;
typedef struct {
    T81TritBuffer plaintext;
    T81TritBuffer key;
    T81TritBuffer ciphertext;
} T81CipherContext;
typedef struct {
    char magic[4];      // 'T81Z'
    uint8_t version;    // 1
    uint16_t original_length;
    char method[4];     // 'REFC', 'AECS', 'RTPE', 'TRTSC'
    uint32_t crc32;
} T81ZHeader;
typedef struct {
    uint8_t code[MAX_DEPTH];
    int length;
} HuffmanCode;
typedef struct {
    HuffmanCode codes[TRIT_VALUES];
} HuffmanTable;
@<Ternary Utilities@>
@<Binary to Ternary Conversion@>
@<Key Scheduling@>
@<REFC Cipher Implementation@>
@<AECS Cipher Implementation@>
@<RTPE Cipher Implementation@>
@<TRTSC Cipher Implementation@>
@<Compression Routines@>
@<Huffman Utilities@>
@<File I/O Utilities@>
@<Entropy Analysis@>
@<Command-Line Parsing@>
@<Test and Demo Functions@>
int main(int argc, char* argv[]) {
    srand(time(NULL));
    char* cipher = NULL;
    char* input_file = NULL;
    char* output_file = "output.t81z";
    char* key_file = NULL;
    int plaintext_size = 16;
    int key_size = 8;
    int compress = 0;
    char* compress_method = "HUF";

@<Parse Command-Line Arguments@>

// Read or generate plaintext
T81CipherContext ctx;
if (input_file) {
    uint8_t binary_buffer[MAX_TRITS];
    int binary_length = 0;
    FILE* input = (strcmp(input_file, "-") == 0) ? stdin : fopen(input_file, "rb");
    if (!input) {
        fprintf(stderr, "Error: Could not open input %s\n", input_file);
        return 1;
    }
    binary_length = fread(binary_buffer, 1, MAX_TRITS, input);
    if (input != stdin) fclose(input);
    binary_to_trits(binary_buffer, binary_length, &ctx.plaintext, 5);
} else {
    generate_random_trits(&ctx.plaintext, plaintext_size);
}

// Read or generate key
if (key_file) {
    FILE* kf = fopen(key_file, "rb");
    if (!kf) {
        fprintf(stderr, "Error: Could not open key file %s\n", key_file);
        return 1;
    }
    uint8_t key_buffer[MAX_KEY_SIZE];
    int key_length = fread(key_buffer, 1, MAX_KEY_SIZE, kf);
    fclose(kf);
    binary_to_trits(key_buffer, key_length, &ctx.key, 5);
    if (ctx.key.length > MAX_KEY_SIZE) ctx.key.length = MAX_KEY_SIZE;
} else {
    generate_random_trits(&ctx.key, key_size);
}

// Derive stronger key
T81TritBuffer derived_key;
derive_key(&ctx.key, &derived_key, ctx.plaintext.length);

// Encrypt
clock_t start = clock();
if (!cipher || strcmp(cipher, "REFC") == 0) {
    refc_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
} else if (strcmp(cipher, "AECS") == 0) {
    aecs_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
} else if (strcmp(cipher, "RTPE") == 0) {
    rtpe_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
} else if (strcmp(cipher, "TRTSC") == 0) {
    trtsc_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
} else {
    fprintf(stderr, "Unknown cipher: %s\n", cipher);
    return 1;
}

// Compress ciphertext if requested
uint8_t compressed_buffer[MAX_TRITS];
int compressed_length = ctx.ciphertext.length * sizeof(Trit);
if (compress) {
    if (strcmp(compress_method, "RLE") == 0) {
        rle_compress(&ctx.ciphertext, compressed_buffer, &compressed_length);
    } else {
        HuffmanTable table;
        build_huffman_table(&ctx.ciphertext, &table);
        huffman_compress(&ctx.ciphertext, compressed_buffer, &compressed_length, &table);
    }
} else {
    memcpy(compressed_buffer, ctx.ciphertext.trits, ctx.ciphertext.length * sizeof(Trit));
}

// Write to file
write_compressed_file(output_file, &ctx.ciphertext, compressed_buffer, compressed_length, cipher);

// Decrypt for validation
T81TritBuffer decrypted;
if (!cipher || strcmp(cipher, "REFC") == 0) {
    refc_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
} else if (strcmp(cipher, "AECS") == 0) {
    aecs_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
} else if (strcmp(cipher, "RTPE") == 0) {
    rtpe_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
} else if (strcmp(cipher, "TRTSC") == 0) {
    trtsc_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
}

// Benchmark and report
double time_taken = (double)(clock() - start) / CLOCKS_PER_SEC;
double ratio = (double)compressed_length / (ctx.ciphertext.length * sizeof(Trit));
double entropy = entropy_score(&ctx.ciphertext);
int valid = (decrypted.length == ctx.plaintext.length) &&
            (memcmp(decrypted.trits, ctx.plaintext.trits, decrypted.length * sizeof(Trit)) == 0);

printf("T81 Cipher Suite (%s):\n", cipher ? cipher : "ALL");
print_trits("Plaintext", &ctx.plaintext);
print_trits("Key", &ctx.key);
print_trits("Ciphertext", &ctx.ciphertext);
print_trits("Decrypted", &decrypted);
printf("  Valid decryption: %s\n", valid ? "Yes" : "No");
printf("  Compressed size: %d bytes\n", compressed_length);
printf("  Compression ratio: %.2f\n", ratio);
printf("  Ciphertext entropy: %.2f bits/trit\n", entropy);
printf("  Time: %.4f seconds\n", time_taken);
printf("  Output file: %s\n", output_file);

return 0;

}
@*1 Ternary Utilities
@<Ternary Utilities@>=
Trit random_trit() {
    return (Trit)(rand() % TRIT_VALUES - 1);
}
void print_trits(const char* label, const T81TritBuffer* buf) {
    printf("%s: ", label);
    for (int i = 0; i < buf->length; ++i) {
        if (buf->trits[i] < -1 || buf->trits[i] > 1) {
            fprintf(stderr, "Invalid trit: %d\n", buf->trits[i]);
            exit(1);
        }
        char c = buf->trits[i] == -1 ? '-' : (buf->trits[i] == 0 ? '0' : '+');
        putchar(c);
    }
    putchar('\n');
}
void generate_random_trits(T81TritBuffer* buf, int length) {
    if (length < 0 || length > MAX_TRITS) {
        fprintf(stderr, "Invalid length: %d\n", length);
        exit(1);
    }
    buf->length = length;
    for (int i = 0; i < length; ++i) {
        buf->trits[i] = random_trit();
    }
}
@*1 Binary to Ternary Conversion
@<Binary to Ternary Conversion@>=
static const uint8_t bit_to_trit_map[32][3] = {
    {-1, -1, -1}, {-1, -1, 0}, {-1, -1, 1}, {-1, 0, -1}, {-1, 0, 0}, {-1, 0, 1}, {-1, 1, -1}, {-1, 1, 0},
    {-1, 1, 1}, {0, -1, -1}, {0, -1, 0}, {0, -1, 1}, {0, 0, -1}, {0, 0, 0}, {0, 0, 1}, {0, 1, -1},
    {0, 1, 0}, {0, 1, 1}, {1, -1, -1}, {1, -1, 0}, {1, -1, 1}, {1, 0, -1}, {1, 0, 0}, {1, 0, 1},
    {1, 1, -1}, {1, 1, 0}, {1, 1, 1}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}
};
void binary_to_trits(const uint8_t* binary, int binary_length, T81TritBuffer* trits, int chunk_size) {
    if (chunk_size != 5) {
        fprintf(stderr, "Only chunk_size=5 is supported\n");
        exit(1);
    }
    trits->length = 0;
    int bit_pos = 0;
    while (bit_pos < binary_length * 8 && trits->length + 3 <= MAX_TRITS) {
        int value = 0;
        for (int i = 0; i < 5 && bit_pos < binary_length * 8; ++i) {
            value = (value << 1) | ((binary[bit_pos / 8] >> (7 - (bit_pos % 8))) & 1);
            bit_pos++;
        }
        if (value < 27) {
            trits->trits[trits->length++] = bit_to_trit_map[value][0];
            trits->trits[trits->length++] = bit_to_trit_map[value][1];
            trits->trits[trits->length++] = bit_to_trit_map[value][2];
        }
    }
    if (bit_pos < binary_length * 8 && trits->length < MAX_TRITS) {
        int remaining = binary_length * 8 - bit_pos;
        for (int i = 0; i < remaining && trits->length < MAX_TRITS; ++i) {
            trits->trits[trits->length++] = 0;
        }
    }
}
@1 Key Scheduling
@<Key Scheduling@>=
void derive_key(const T81TritBuffer key, T81TritBuffer* derived, int target_length) {
    if (key->length == 0) {
        fprintf(stderr, "Empty key\n");
        exit(1);
    }
    derived->length = target_length;
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256((unsigned char*)key->trits, key->length * sizeof(Trit), hash);
    for (int i = 0; i < target_length; ++i) {
        derived->trits[i] = (Trit)((hash[i % SHA256_DIGEST_LENGTH] % TRIT_VALUES) - 1);
    }
}
@1 REFC Cipher Implementation
@<REFC Cipher Implementation@>=
void refc_encrypt(const T81TritBuffer input, const T81TritBuffer* key, T81TritBuffer* output) {
    if (input->length == 0 || key->length == 0) {
        fprintf(stderr, "Invalid REFC input or key\n");
        exit(1);
    }
    output->length = input->length;
    for (int i = 0; i < input->length; ++i) {
        output->trits[i] = (input->trits[i] + key->trits[i % key->length]) % 3;
        if (output->trits[i] > 1) output->trits[i] -= 3; // Map to -1, 0, +1
    }
}
void refc_decrypt(const T81TritBuffer* input, const T81TritBuffer* key, T81TritBuffer* output) {
    if (input->length == 0 || key->length == 0) {
        fprintf(stderr, "Invalid REFC input or key\n");
        exit(1);
    }
    output->length = input->length;
    for (int i = 0; i < input->length; ++i) {
        output->trits[i] = (input->trits[i] - key->trits[i % key->length]) % 3;
        if (output->trits[i] > 1) output->trits[i] -= 3;
    }
}
@*1 AECS Cipher Implementation
@<AECS Cipher Implementation@>=
Trit ternary_xor(Trit a, Trit b) {
    // Define XOR: -1 XOR -1 = 0, -1 XOR 0 = -1, -1 XOR 1 = 1, etc.
    static const Trit xor_table[3][3] = {
        {0, -1, 1},  // -1 XOR (-1, 0, 1)
        {-1, 0, 1},  // 0 XOR (-1, 0, 1)
        {1, 1, 0}    // 1 XOR (-1, 0, 1)
    };
    return xor_table[a + 1][b + 1];
}
void aecs_encrypt(const T81TritBuffer* input, const T81TritBuffer* key, T81TritBuffer* output) {
    if (input->length == 0 || key->length == 0) {
        fprintf(stderr, "Invalid AECS input or key\n");
        exit(1);
    }
    output->length = input->length;
    for (int i = 0; i < input->length; ++i) {
        output->trits[i] = ternary_xor(input->trits[i], key->trits[i % key->length]);
    }
}
void aecs_decrypt(const T81TritBuffer* input, const T81TritBuffer* key, T81TritBuffer* output) {
    aecs_encrypt(input, key, output); // XOR is self-inverse
}
@1 RTPE Cipher Implementation
@<RTPE Cipher Implementation@>=
void rtpe_encrypt(const T81TritBuffer input, const T81TritBuffer* key, T81TritBuffer* output) {
    if (input->length == 0 || key->length == 0) {
        fprintf(stderr, "Invalid RTPE input or key\n");
        exit(1);
    }
    output->length = input->length;
    for (int i = 0; i < input->length; ++i) {
        output->trits[i] = (input->trits[i] + key->trits[(i * i) % key->length]) % 3;
        if (output->trits[i] > 1) output->trits[i] -= 3;
    }
}
void rtpe_decrypt(const T81TritBuffer* input, const T81TritBuffer* key, T81TritBuffer* output) {
    if (input->length == 0 || key->length == 0) {
        fprintf(stderr, "Invalid RTPE input or key\n");
        exit(1);
    }
    output->length = input->length;
    for (int i = 0; i < input->length; ++i) {
        output->trits[i] = (input->trits[i] - key->trits[(i * i) % key->length]) % 3;
        if (output->trits[i] > 1) output->trits[i] -= 3;
    }
}
@1 TRTSC Cipher Implementation
@<TRTSC Cipher Implementation@>=
void trtsc_encrypt(const T81TritBuffer input, const T81TritBuffer* key, T81TritBuffer* output) {
    if (input->length == 0 || key->length == 0) {
        fprintf(stderr, "Invalid TRTSC input or key\n");
        exit(1);
    }
    output->length = input->length;
    for (int i = 0; i < input->length; ++i) {
        output->trits[i] = (input->trits[i] - key->trits[(input->length - 1 - i) % key->length]) % 3;
        if (output->trits[i] > 1) output->trits[i] -= 3;
    }
}
void trtsc_decrypt(const T81TritBuffer* input, const T81TritBuffer* key, T81TritBuffer* output) {
    if (input->length == 0 || key->length == 0) {
        fprintf(stderr, "Invalid TRTSC input or key\n");
        exit(1);
    }
    output->length = input->length;
    for (int i = 0; i < input->length; ++i) {
        output->trits[i] = (input->trits[i] + key->trits[(input->length - 1 - i) % key->length]) % 3;
        if (output->trits[i] > 1) output->trits[i] -= 3;
    }
}
@1 Compression Routines
@<Compression Routines@>=
void rle_compress(const T81TritBuffer data, uint8_t* buffer, int* out_length) {
    *out_length = 0;
    for (int i = 0; i < data->length; ) {
        Trit t = data->trits[i];
        int run = 1;
        while (i + run < data->length && data->trits[i + run] == t && run < 255) {
            run++;
        }
        if (*out_length + 2 > MAX_TRITS) {
            fprintf(stderr, "Buffer overflow in RLE compression\n");
            exit(1);
        }
        buffer[(*out_length)++] = (uint8_t)(t + 1);
        buffer[(*out_length)++] = (uint8_t)run;
        i += run;
    }
}
@1 Huffman Utilities
@<Huffman Utilities@>=
void build_huffman_table(const T81TritBuffer data, HuffmanTable* table) {
    table->codes[0].length = 2; // -1: 10
    table->codes[0].code[0] = 1; table->codes[0].code[1] = 0;
    table->codes[1].length = 1; // 0: 0
    table->codes[1].code[0] = 0;
    table->codes[2].length = 2; // +1: 11
    table->codes[2].code[0] = 1; table->codes[2].code[1] = 1;
}
void huffman_compress(const T81TritBuffer* data, uint8_t* buffer, int* out_length, HuffmanTable* table) {
    int bit_pos = 0;
    *out_length = 0;
    memset(buffer, 0, MAX_TRITS);
    for (int i = 0; i < data->length; ++i) {
        int idx = data->trits[i] + 1;
        for (int j = 0; j < table->codes[idx].length; ++j) {
            if (bit_pos >= MAX_TRITS * 8) {
                fprintf(stderr, "Buffer overflow in Huffman compression\n");
                exit(1);
            }
            if (table->codes[idx].code[j]) {
                buffer[bit_pos / 8] |= (1 << (7 - (bit_pos % 8)));
            }
            bit_pos++;
        }
    }
    *out_length = (bit_pos + 7) / 8;
}
@1 File I/O Utilities
@<File I/O Utilities@>=
uint32_t compute_crc32(const T81TritBuffer data) {
    unsigned char* bytes = (unsigned char*)data->trits;
    uint32_t crc = 0;
    SHA256(bytes, data->length * sizeof(Trit), (unsigned char*)&crc);
    return crc;
}
void write_compressed_file(const char* filename, const T81TritBuffer* data, const uint8_t* buffer, int buffer_length, const char* method) {
    FILE* f = fopen(filename, "wb");
    if (!f) {
        fprintf(stderr, "Error: Could not open file for writing: %s\n", filename);
        exit(1);
    }
    T81ZHeader header = {
        .magic = {'T', '8', '1', 'Z'},
        .version = 1,
        .original_length = (uint16_t)data->length,
        .crc32 = compute_crc32(data)
    };
    strncpy(header.method, method, 4);
    fwrite(&header, sizeof(T81ZHeader), 1, f);
    fwrite(buffer, 1, buffer_length, f);
    fclose(f);
}
@1 Entropy Analysis
@<Entropy Analysis@>=
double entropy_score(const T81TritBuffer data) {
    if (data->length <= 0) return 0.0;
    int counts[TRIT_VALUES] = {0};
    for (int i = 0; i < data->length; ++i) {
        if (data->trits[i] < -1 || data->trits[i] > 1) {
            fprintf(stderr, "Invalid trit: %d\n", data->trits[i]);
            exit(1);
        }
        counts[data->trits[i] + 1]++;
    }
    double score = 0.0;
    for (int i = 0; i < TRIT_VALUES; ++i) {
        if (counts[i] > 0) {
            double p = counts[i] / (double)data->length;
            score -= p * log2(p);
        }
    }
    return score;
}
@1 Command-Line Parsing
@<Command-Line Parsing@>=
void parse_args(int argc, char argv[], char** cipher, char** input_file, char** output_file,
                char** key_file, int* plaintext_size, int* key_size, int* compress, char** compress_method) {
    for (int i = 1; i < argc; ++i) {
        if (strcmp(argv[i], "--cipher") == 0 && i + 1 < argc) {
            *cipher = argv[++i];
        } else if (strcmp(argv[i], "--input") == 0 && i + 1 < argc) {
            *input_file = argv[++i];
        } else if (strcmp(argv[i], "--output") == 0 && i + 1 < argc) {
            *output_file = argv[++i];
        } else if (strcmp(argv[i], "--key") == 0 && i + 1 < argc) {
            *key_file = argv[++i];
        } else if (strcmp(argv[i], "--plaintext-size") == 0 && i + 1 < argc) {
            *plaintext_size = atoi(argv[++i]);
            if (*plaintext_size <= 0 || *plaintext_size > MAX_TRITS) {
                fprintf(stderr, "Invalid plaintext size: %d\n", *plaintext_size);
                exit(1);
            }
        } else if (strcmp(argv[i], "--key-size") == 0 && i + 1 < argc) {
            *key_size = atoi(argv[++i]);
            if (*key_size <= 0 || *key_size > MAX_KEY_SIZE) {
                fprintf(stderr, "Invalid key size: %d\n", *key_size);
                exit(1);
            }
        } else if (strcmp(argv[i], "--compress") == 0 && i + 1 < argc) {
            *compress = 1;
            *compress_method = argv[++i];
            if (strcmp(*compress_method, "RLE") != 0 && strcmp(*compress_method, "HUF") != 0) {
                fprintf(stderr, "Invalid compression method: %s\n", *compress_method);
                exit(1);
            }
        } else {
            fprintf(stderr, "Unknown argument: %s\n", argv[i]);
            exit(1);
        }
    }
}
@<Parse Command-Line Arguments@>=
parse_args(argc, argv, &cipher, &input_file, &output_file, &key_file, &plaintext_size, &key_size, &compress, &compress_method);
@*1 Test and Demo Functions
@<Test and Demo Functions@>=
void run_refc_demo() {
    T81CipherContext ctx;
    generate_random_trits(&ctx.plaintext, 16);
    generate_random_trits(&ctx.key, 8);
    T81TritBuffer derived_key;
    derive_key(&ctx.key, &derived_key, ctx.plaintext.length);
    refc_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
    T81TritBuffer decrypted;
    refc_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
    print_trits("REFC Plaintext", &ctx.plaintext);
    print_trits("REFC Key", &ctx.key);
    print_trits("REFC Ciphertext", &ctx.ciphertext);
    print_trits("REFC Decrypted", &decrypted);
}
void run_aecs_demo() {
    T81CipherContext ctx;
    generate_random_trits(&ctx.plaintext, 16);
    generate_random_trits(&ctx.key, 8);
    T81TritBuffer derived_key;
    derive_key(&ctx.key, &derived_key, ctx.plaintext.length);
    aecs_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
    T81TritBuffer decrypted;
    aecs_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
    print_trits("AECS Plaintext", &ctx.plaintext);
    print_trits("AECS Key", &ctx.key);
    print_trits("AECS Ciphertext", &ctx.ciphertext);
    print_trits("AECS Decrypted", &decrypted);
}
void run_rtpe_demo() {
    T81CipherContext ctx;
    generate_random_trits(&ctx.plaintext, 16);
    generate_random_trits(&ctx.key, 8);
    T81TritBuffer derived_key;
    derive_key(&ctx.key, &derived_key, ctx.plaintext.length);
    rtpe_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
    T81TritBuffer decrypted;
    rtpe_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
    print_trits("RTPE Plaintext", &ctx.plaintext);
    print_trits("RTPE Key", &ctx.key);
    print_trits("RTPE Ciphertext", &ctx.ciphertext);
    print_trits("RTPE Decrypted", &decrypted);
}
void run_trtsc_demo() {
    T81CipherContext ctx;
    generate_random_trits(&ctx.plaintext, 16);
    generate_random_trits(&ctx.key, 8);
    T81TritBuffer derived_key;
    derive_key(&ctx.key, &derived_key, ctx.plaintext.length);
    trtsc_encrypt(&ctx.plaintext, &derived_key, &ctx.ciphertext);
    T81TritBuffer decrypted;
    trtsc_decrypt(&ctx.ciphertext, &derived_key, &decrypted);
    print_trits("TRTSC Plaintext", &ctx.plaintext);
    print_trits("TRTSC Key", &ctx.key);
    print_trits("TRTSC Ciphertext", &ctx.ciphertext);
    print_trits("TRTSC Decrypted", &decrypted);
}
