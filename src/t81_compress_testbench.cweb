@* Advanced Ternary Compression Evaluation with Huffman & RLE, Metadata, Benchmarking, and File Decompression *@
This program generates random ternary data, compresses it using RLE and Huffman coding, evaluates compression performance (time, ratio, entropy), and validates decompression. It uses a custom T81Z file format with metadata and CRC32 checksums for integrity.
@c

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <openssl/sha.h> // For CRC32 (via OpenSSL)
#define MAX_DATA_SIZE 1024
#define TRIT_VALUES 3
#define MAX_CODE_LENGTH 8 // Max bits for Huffman codes
typedef int8_t Trit; // -1, 0, +1
typedef struct {
    Trit data[MAX_DATA_SIZE];
    int length;
} T81Data;
typedef struct {
    char magic[4];      // 'T81Z'
    uint8_t version;    // Format version (1)
    uint16_t original_length;
    char method[4];     // 'RLE' or 'HUF'
    uint32_t crc32;     // Checksum of original data
} T81ZHeader;
typedef struct {
    uint8_t code[MAX_CODE_LENGTH];
    int length;
} HuffmanCode;
typedef struct {
    HuffmanCode codes[TRIT_VALUES];
} HuffmanTable;
@<Global Variables@>
@<Random Data Generation@>
@<Compression Routines@>
@<Entropy Analysis@>
@<File Output Utilities@>
@<File Input and Decompression@>
@<Test Execution Logic@>
@<Decompression Validation@>
@<Huffman Utilities@>
int main(int argc, char* argv[]) {
    srand(time(NULL));
    int data_size = 512;
    char* method = NULL;
    char* output_prefix = "output";

// Parse command-line arguments
for (int i = 1; i < argc; ++i) {
    if (strcmp(argv[i], "--size") == 0 && i + 1 < argc) {
        data_size = atoi(argv[++i]);
        if (data_size <= 0 || data_size > MAX_DATA_SIZE) {
            fprintf(stderr, "Invalid size: %d\n", data_size);
            return 1;
        }
    } else if (strcmp(argv[i], "--method") == 0 && i + 1 < argc) {
        method = argv[++i];
    } else if (strcmp(argv[i], "--output") == 0 && i + 1 < argc) {
        output_prefix = argv[++i];
    } else {
        fprintf(stderr, "Unknown argument: %s\n", argv[i]);
        return 1;
    }
}

T81Data original;
generate_random_trits(&original, data_size);

printf("Original data (first 64 trits):\n");
for (int i = 0; i < (data_size < 64 ? data_size : 64); ++i) {
    printf("%c", original.data[i] == -1 ? '-' : (original.data[i] == 0 ? '0' : '+'));
}
printf("\n\n");

// Run tests for specified method or both
if (method == NULL || strcmp(method, "rle") == 0) {
    char filename[256];
    snprintf(filename, sizeof(filename), "%s_rle.t81z", output_prefix);
    run_compression_tests(&original, "RLE", filename);
    decompress_from_file(filename, &original);
}
if (method == NULL || strcmp(method, "huf") == 0) {
    char filename[256];
    snprintf(filename, sizeof(filename), "%s_huff.t81z", output_prefix);
    run_compression_tests(&original, "HUF", filename);
    decompress_from_file(filename, &original);
}

return 0;

}
@*1 Global Variables
@<Global Variables@>=
static T81Data g_original; // Store original for validation
@*1 Random Data Generation
@<Random Data Generation@>=
void generate_random_trits(T81Data* data, int length) {
    if (length < 0 || length > MAX_DATA_SIZE) {
        fprintf(stderr, "Invalid data length: %d\n", length);
        exit(1);
    }
    data->length = length;
    for (int i = 0; i < length; ++i) {
        data->data[i] = (Trit)(rand() % TRIT_VALUES - 1);
    }
    memcpy(&g_original, data, sizeof(T81Data)); // Store for validation
}
@*1 Entropy Analysis
@<Entropy Analysis@>=
double entropy_score(const T81Data* data) {
    if (data->length <= 0) return 0.0;
    int counts[TRIT_VALUES] = {0};
    for (int i = 0; i < data->length; ++i) {
        if (data->data[i] < -1 || data->data[i] > 1) {
            fprintf(stderr, "Invalid trit: %d\n", data->data[i]);
            exit(1);
        }
        counts[data->data[i] + 1]++;
    }
    double score = 0.0;
    for (int i = 0; i < TRIT_VALUES; ++i) {
        if (counts[i] > 0) {
            double p = counts[i] / (double)data->length;
            score -= p * log2(p);
        }
    }
    return score;
}
@*1 Huffman Utilities
@<Huffman Utilities@>=
void build_huffman_table(const T81Data* data, HuffmanTable* table) {
    // Simple frequency-based codes (for demo; assumes equal probabilities)
    int counts[TRIT_VALUES] = {0};
    for (int i = 0; i < data->length; ++i) {
        counts[data->data[i] + 1]++;
    }
    // Assign fixed codes: -1: 10, 0: 0, +1: 11 (approx. optimal for uniform data)
    table->codes[0].length = 2; // -1
    table->codes[0].code[0] = 1; table->codes[0].code[1] = 0;
    table->codes[1].length = 1; // 0
    table->codes[1].code[0] = 0;
    table->codes[2].length = 2; // +1
    table->codes[2].code[0] = 1; table->codes[2].code[1] = 1;
}
void huffman_compress(const T81Data* data, uint8_t* buffer, int* out_length, HuffmanTable* table) {
    int bit_pos = 0;
    *out_length = 0;
    memset(buffer, 0, MAX_DATA_SIZE);
    for (int i = 0; i < data->length; ++i) {
        int idx = data->data[i] + 1;
        for (int j = 0; j < table->codes[idx].length; ++j) {
            if (bit_pos >= MAX_DATA_SIZE * 8) {
                fprintf(stderr, "Buffer overflow in Huffman compression\n");
                exit(1);
            }
            if (table->codes[idx].code[j]) {
                buffer[bit_pos / 8] |= (1 << (7 - (bit_pos % 8)));
            }
            bit_pos++;
        }
    }
    *out_length = (bit_pos + 7) / 8; // Round up to bytes
}
void huffman_decompress(const uint8_t* buffer, int buffer_length, T81Data* data, HuffmanTable* table) {
    int bit_pos = 0;
    data->length = 0;
    while (bit_pos < buffer_length * 8 && data->length < MAX_DATA_SIZE) {
        if (buffer[bit_pos / 8] & (1 << (7 - (bit_pos % 8)))) {
            // Starts with 1: check next bit
            bit_pos++;
            if (bit_pos >= buffer_length * 8) break;
            if (buffer[bit_pos / 8] & (1 << (7 - (bit_pos % 8)))) {
                data->data[data->length++] = 1; // 11 -> +1
            } else {
                data->data[data->length++] = -1; // 10 -> -1
            }
            bit_pos++;
        } else {
            data->data[data->length++] = 0; // 0 -> 0
            bit_pos++;
        }
    }
}
@*1 Compression Routines
@<Compression Routines@>=
void rle_compress(const T81Data* data, uint8_t* buffer, int* out_length) {
    *out_length = 0;
    for (int i = 0; i < data->length; ) {
        Trit t = data->data[i];
        int run = 1;
        while (i + run < data->length && data->data[i + run] == t && run < 255) {
            run++;
        }
        if (*out_length + 2 > MAX_DATA_SIZE) {
            fprintf(stderr, "Buffer overflow in RLE compression\n");
            exit(1);
        }
        buffer[(*out_length)++] = (uint8_t)(t + 1);
        buffer[(*out_length)++] = (uint8_t)run;
        i += run;
    }
}
@*1 File Output Utilities
@<File Output Utilities@>=
uint32_t compute_crc32(const T81Data* data) {
    unsigned char* bytes = (unsigned char*)data->data;
    uint32_t crc = 0;
    // Simplified CRC32 (requires OpenSSL for real implementation)
    SHA256(bytes, data->length * sizeof(Trit), (unsigned char*)&crc);
    return crc;
}
void write_compressed_file(const char* filename, const T81Data* data, const uint8_t* buffer, int buffer_length, const char* method) {
    FILE* f = fopen(filename, "wb");
    if (!f) {
        fprintf(stderr, "Error: Could not open file for writing: %s\n", filename);
        exit(1);
    }
    T81ZHeader header = {
        .magic = {'T', '8', '1', 'Z'},
        .version = 1,
        .original_length = (uint16_t)data->length,
        .crc32 = compute_crc32(data)
    };
    strncpy(header.method, method, 4);
    fwrite(&header, sizeof(T81ZHeader), 1, f);
    fwrite(buffer, 1, buffer_length, f);
    fclose(f);
}
@*1 File Input and Decompression
@<File Input and Decompression@>=
void decompress_from_file(const char* filename, const T81Data* original) {
    FILE* f = fopen(filename, "rb");
    if (!f) {
        fprintf(stderr, "Error: Could not open file for reading: %s\n", filename);
        return;
    }
    T81ZHeader header;
    if (fread(&header, sizeof(T81ZHeader), 1, f) != 1) {
        fprintf(stderr, "Error: Failed to read header from %s\n", filename);
        fclose(f);
        return;
    }
    if (strncmp(header.magic, "T81Z", 4) != 0) {
        fprintf(stderr, "Invalid T81Z file format: %s\n", filename);
        fclose(f);
        return;
    }
    uint8_t buffer[MAX_DATA_SIZE];
    int length = fread(buffer, 1, MAX_DATA_SIZE, f);
    fclose(f);

T81Data recovered;
recovered.length = 0;
if (strncmp(header.method, "RLE", 3) == 0) {
    for (int i = 0; i < length && recovered.length < MAX_DATA_SIZE; i += 2) {
        if (i + 1 >= length) {
            fprintf(stderr, "Invalid RLE data in %s\n", filename);
            return;
        }
        Trit t = (Trit)(buffer[i] - 1);
        int run = buffer[i + 1];
        if (recovered.length + run > MAX_DATA_SIZE) {
            fprintf(stderr, "RLE decompression overflow in %s\n", filename);
            return;
        }
        for (int j = 0; j < run; ++j) {
            recovered.data[recovered.length++] = t;
        }
    }
} else if (strncmp(header.method, "HUF", 3) == 0) {
    HuffmanTable table;
    build_huffman_table(original, &table); // Rebuild table (assumes same frequencies)
    huffman_decompress(buffer, length, &recovered, &table);
} else {
    fprintf(stderr, "Unknown compression method in %s: %.4s\n", filename, header.method);
    return;
}

// Validate decompression
int valid = validate_decompression(&recovered, original, header.original_length, header.crc32);
printf("Decompressed from '%s' using %s, length: %d, valid: %s\n",
       filename, header.method, recovered.length, valid ? "Yes" : "No");

}
@*1 Decompression Validation
@<Decompression Validation@>=
int validate_decompression(const T81Data* recovered, const T81Data* original, uint16_t expected_length, uint32_t expected_crc) {
    if (recovered->length != expected_length) return 0;
    if (recovered->length != original->length) return 0;
    if (compute_crc32(recovered) != expected_crc) return 0;
    for (int i = 0; i < recovered->length; ++i) {
        if (recovered->data[i] != original->data[i]) return 0;
    }
    return 1;
}
@*1 Test Execution Logic
@<Test Execution Logic@>=
void run_compression_tests(const T81Data* data, const char* method, const char* filename) {
    uint8_t buffer[MAX_DATA_SIZE];
    int compressed_length;
    clock_t start = clock();

if (strcmp(method, "RLE") == 0) {
    rle_compress(data, buffer, &compressed_length);
} else if (strcmp(method, "HUF") == 0) {
    HuffmanTable table;
    build_huffman_table(data, &table);
    huffman_compress(data, buffer, &compressed_length, &table);
} else {
    fprintf(stderr, "Unknown compression method: %s\n", method);
    exit(1);
}

double time_taken = (double)(clock() - start) / CLOCKS_PER_SEC;
double ratio = (double)compressed_length / (data->length * sizeof(Trit));
double entropy = entropy_score(data);

write_compressed_file(filename, data, buffer, compressed_length, method);

printf("Compression (%s):\n", method);
printf("  Original size: %d bytes\n", data->length * (int)sizeof(Trit));
printf("  Compressed size: %d bytes\n", compressed_length);
printf("  Compression ratio: %.2f\n", ratio);
printf("  Entropy: %.2f bits/trit\n", entropy);
printf("  Time: %.4f seconds\n", time_taken);
printf("  Output file: %s\n\n", filename);

}

